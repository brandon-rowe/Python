The “Monty Hall Problem” (https://en.wikipedia.org/wiki/Monty_Hall_problem) 
is a classic introduction to game theory and probability simulations that comes 
from a live TV game show in the 1960s. 

A contestant is faced with three doors. 
Behind one door is a very large prize (say, a car). 
The contestant tries to guess which door has the prize. 

We already know that mathematically the contestant should win 33% of the time. 
Write a program that uses a Monte Carlo simulation to prove it. 

For each simulation run, the program should use a variable to represent 
the randomly chosen winning door number. 

The program should then randomly select a door number from one to three to 
represent the contestant’s choice. 

Finally, display the winning percentage after a large number of simulation 
runs, and confirm that it is very close to 33%. 



The second part of the “Monty Hall Problem” is the most interesting. 
After selecting a door, but before the prize door is revealed, the 
contestant is shown a losing door. 

The contestant now has the option of switching to the other, as-yet 
unopened door. 

Should the contestant stick with their original choice, switch to the other 
unopened door, or does it not matter? 

Modify your program from the first part to always choose to switch to the 
other door, and display the winning percentage after a large number of 
simulation runs. 

What would you conclude to be the best strategy? 
Description: https://en.wikipedia.org/wiki/Monty_Hall_problem.


# rball.py
from random import random

def main():
    printIntro()
    probA, probB, n = getInputs()
    winsA, winsB = simNGames(n, probA, probB)
    printSummary(winsA, winsB)

def printIntro():
    print("This program simulates a game of racquetball between two")
    print('players called "A" and "B".  The abilities of each player is')
    print("indicated by a probability (a number between 0 and 1) that")
    print("the player wins the point when serving. Player A always")
    print("has the first serve.")

def getInputs():
    # Returns the three simulation parameters
    a = eval(input("What is the prob. player A wins a serve? "))
    b = eval(input("What is the prob. player B wins a serve? "))
    n = eval(input("How many games to simulate? "))
    return a, b, n

def simNGames(n, probA, probB):
    # Simulates n games of racquetball between players whose
    # abilities are represented by the probability of winning a serve.
    # Returns number of wins for A and B
    winsA = winsB = 0
    for i in range(n):
        scoreA, scoreB = simOneGame(probA, probB)
        if scoreA > scoreB:
            winsA = winsA + 1
        else:
            winsB = winsB + 1
    return winsA, winsB

def simOneGame(probA, probB):
    # Simulates a single game or racquetball between players whose
    # abilities are represented by the probability of winning a serve.
    # Returns final scores for A and B
    serving = "A"
    scoreA = 0
    scoreB = 0
    while not gameOver(scoreA, scoreB):
        if serving == "A":
            if random() < probA:
                scoreA = scoreA + 1
            else:
                serving = "B"
        else:
            if random() < probB:
                scoreB = scoreB + 1
            else:
                serving = "A"
    return scoreA, scoreB

def gameOver(a, b):
    # a and b represent scores for a racquetball game
    # Returns True if the game is over, False otherwise.
    return a==15 or b==15

def printSummary(winsA, winsB):
    # Prints a summary of wins for each player.
    n = winsA + winsB
    print("\nGames simulated:", n)
    print("Wins for A: {0} ({1:0.1%})".format(winsA, winsA/n))
    print("Wins for B: {0} ({1:0.1%})".format(winsB, winsB/n))

if __name__ == '__main__': main()
